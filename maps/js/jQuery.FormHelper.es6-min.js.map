{"version":3,"sources":["../src/js/jQuery.FormHelper.es6.js"],"names":["global","factory","define","amd","$","document","exports","module","require","jQuery","window","this","undefined","settings","defaultOptions","disableSubmitBtn","errorHurdling","DEBUG_MODE","p","ERROR","params","console","error","toString","supportedTag","supportedType","$el","[object Object]","el","opts","extend","init","attr","pairingErrorAndFields","info","DEBUG","pluginName","find","prop","submit","e","preventDefault","resetFormError","validationLoop","join","each","idx","rules","data","nameSpaceKey","val","forEach","r","result","validationDelegator","log","idKey","errors","length","addClass","rule","trim","toLocaleLowerCase","emailAddrString","test","validateEmail","phoneNumberString","validateTel","inputTag","getTargetInputField","inputIDStr","generateUUID_v4","errorRules","toLowerCase","split","rulesArr","finalRules","Set","concat","includes","warn","WARNING","typeOfField","required","existingRules","push","hasErrorFor","afterInput","prev","underErrorGroup","parent","toUpperCase","underErrorGroupWithForKey","underErrorGroupAfterInput","text","removeClass","d","Date","getTime","d2","performance","now","replace","c","Math","random","floor","fn","options"],"mappings":"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","sourcesContent":["/**\n * Form Validation Helper jQuery Plugin\n * Author: Kevin\n * Mar-2020\n *\n * Changelog:\n * Mar-2020 - Rewrite into ES6\n *\n * Features:\n * 1. Validation Form fields value based on type or Regex\n * 2. Display, focus, (and scroll to) error (or the first of) message\n * 3. Support validation of single field or all fields\n *\n * Special thanks to @publicJorn [Jorn Luiten] for the ES6 jQuery Plugins template\n */\n(function(global, factory) {\n  'use strict';\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], function($) {\n      return factory($, global, global.document);\n    });\n  } else if (typeof exports === \"object\" && exports) {\n    module.exports = factory(require('jquery'), global, global.document);\n  } else {\n    factory(jQuery, global, global.document);\n  }\n})(typeof window !== 'undefined' ? window : this, function($, window, document, undefined) {\n  'use strict';\n\n  const pluginName = 'FormHelper';\n\n  // -- Globals (shared across all plugin instances)\n  let settings = {};\n  const defaultOptions = {\n    // Component(s) default behavior\n    disableSubmitBtn : true,\n    errorHurdling    : false,\n    // Development Related\n    DEBUG_MODE : false,\n  };\n\n  const $window = $(window);\n  const $document = $(document);\n\n  // p = placeholder, together with pluginName\n  const p = {};\n\n  // Utilities Func\n  const DEBUG   = (...params) => { settings.DEBUG_MODE && console.info ( \"DEBUG:\\n\\t\"   + params.toString() + \"\\n---\"); }\n  const ERROR   = (...params) => { settings.DEBUG_MODE && console.error( \"ERROR:\\n\\t\"   + params.toString() + \"\\n---\"); }\n  const WARNING = (...params) => { settings.DEBUG_MODE && console.warn ( \"WARNING:\\n\\t\" + params.toString() + \"\\n---\"); }\n\n  // Regex Test Methods\n  const validateEmail = (emailAddrString) => (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(emailAddrString));\n  const validateTel = (phoneNumberString) => (/^[\\+]?[(]?[0-9]{0,3}[)]?[-\\s]?[0-9]{4}[-\\s]?[0-9]{4,6}$/.test(phoneNumberString));\n\n  // TODO: addition tag & type needs to be supported\n  const supportedTag = [\"INPUT\", \"TEXTAREA\"/* , \"SELECT\" */];\n  const supportedType = [\"EMAIL\", \"TEL\"];\n  const nameSpaceKey = \"formHelper_\";\n\n  let $el;\n\n  p[pluginName] = class {\n    constructor (el, opts) {\n      $el = $(el);\n      settings = $.extend({}, defaultOptions, opts) ;\n      // this._defaultOptions = defaultOptions;\n\n      this.init();\n    }\n\n    init() {\n      // Let's disable HTML5 default validation\n      $el.attr(\"novalidate\", \"\");\n\n\n      // Preparing\n      this.pairingErrorAndFields();\n      DEBUG(pluginName+' initialised', this.el);\n\n      // this.eachField_forDebugging();\n\n      if (settings.disableSubmitBtn) {\n        // TODO: this needs to be handle together with \"on_change\" & \"on_submit\"\n        $el.find('[type=\"submit\"]').prop(\"disabled\", true);\n      }\n      if (true) {\n        // TODO: this needs to be handle together with \"on_change\" & \"on_submit\"\n        $el.submit((e) => {\n          e.preventDefault();\n\n          this.resetFormError();\n          this.validationLoop();\n\n          return false;\n        })\n      }\n\n    }\n\n\n    /**\n     * Perform a full test on specified form fields\n     */\n    validationLoop() {\n\n      $el.find(supportedTag.join(',')).each((idx, e) => {\n        let rules = $(e).data(nameSpaceKey+\"rules\");\n        let val = $(e).val();\n\n        rules.forEach( r => {\n          let result = this.validationDelegator(val, r);\n          console.log(\"Testing['\"+val+\"' with rule: '\"+r+\"'] = \" + result);\n\n          if (!result) {\n            // Error show up\n            let idKey = $(e).attr(\"id\");\n            $(e).attr(\"aria-invalid\", true);\n\n            let errors = $('error[errorFor=\"'+idKey+'\"], .error[errorFor=\"'+idKey+'\"]');\n            if (errors.length == 1) {\n              errors.addClass(\"errorShow\");\n            } else if (errors.length > 1) {\n              $('error[data-rule=\"'+r+'\"], .error[data-rule=\"'+r+'\"]').addClass(\"errorShow\");\n            } else {\n              ERROR(\"Error message disappeared! Something wrong happened\");\n            }\n\n            // return result;  // TODO: needs to handle \"errorHurdling\"\n          }\n        });\n      });\n\n      return false;\n    }\n\n\n    /**\n     * Test single form field (or a single group like checkbox)\n     * and then return validation result (true or false)\n     *\n     * p.s. for 'Required', 'email', 'tel' rule, string will be trim and test but other won't\n     *\n     * @param {string} val - Form Field value in text\n     * @param {string} rule - Name (key) of validation rule, single value only\n     */\n    validationDelegator(val, rule) {\n\n      // if (!val) {\n      //   ERROR(\"Value to be tested is empty\");\n      //   return false;\n      // }\n\n      let r = rule.trim().toLocaleLowerCase();\n\n      if (r === \"required\") {\n        return (val.trim().length > 0);\n      } else if (r === \"email\") {\n        return validateEmail(val.trim());\n      } else if (r === \"tel\") {\n        return validateTel(val.trim());\n      } else {\n        ERROR(\"Rule: \"+r+\" is not supported\");\n      }\n      return false;\n    }\n\n\n    // Link up error message to form fields\n    pairingErrorAndFields() {\n\n      // Gather all rules & store in Form Fields for future use\n      $(\".error, error\").each((idx, e) => {\n\n        let inputTag = this.getTargetInputField(e);\n        if (inputTag) {\n\n          // Pairing by ID string\n          let inputIDStr = $(inputTag).attr(\"id\") || this.generateUUID_v4();\n          $(e).data(\"errorFor\", inputIDStr).attr(\"errorFor\", inputIDStr);\n          // if (settings.DEBUG_MODE) {\n          //   $(e).attr(\"errorFor\", inputIDStr);\n          // }\n\n          // Copy rules into input fields\n          // 1. gathering all rules into single list (single source of truth)\n          let errorRules = $(e).attr(\"data-rule\") ? $(e).attr(\"data-rule\").toLowerCase().split(',') : [];\n          let rulesArr = $(inputTag).data(nameSpaceKey+\"rules\") || [];\n          // TODO: regex rules\n          let finalRules = [...new Set(rulesArr.concat(errorRules))];\n\n          $(inputTag).data(nameSpaceKey+\"rules\", finalRules);\n          if (settings.DEBUG_MODE) {\n            // make it visible for debug\n            $(inputTag).attr(nameSpaceKey+\"rules\", finalRules.join(\",\"));\n          }\n\n          // mark input field as required, just in case\n          if (errorRules.includes(\"required\")) {\n            $(inputTag).prop(\"required\", true);\n          }\n\n          // Warning if input field has no ID\n          if ( ! $(inputTag).attr(\"id\")) {\n            $(inputTag).attr(\"id\", inputIDStr);\n            WARNING(\"Form field missing ID attribute, generated an UUID instead [\"+inputIDStr+\"]\");\n          }\n\n        }\n\n      });\n\n      // Then scan form field(s) if any missing fules\n      // TODO: future requirement, special rules defined in form field\n      $el.find(supportedTag.join(',')).each((idx, e) => {\n        let typeOfField = supportedType.includes( $(e).prop(\"type\") ) ? $(e).prop(\"type\") : \"\";\n        let required = $(e).prop(\"required\") ? \"required\" : \"\";\n        // TODO: regex rules\n        let existingRules = $(e).data(nameSpaceKey+\"rules\") || [];\n\n        if (typeOfField != \"\")  { existingRules.push(typeOfField); }\n        if (required != \"\")     { existingRules.push(required); }\n        existingRules = [...new Set(existingRules)];\n\n        $(e).data(nameSpaceKey+\"rules\", existingRules);\n        if (settings.DEBUG_MODE) {\n          $(e).attr(nameSpaceKey+\"rules\", existingRules.join(\",\"));\n        }\n\n      });\n    }\n\n    // Keep looking for target until found\n    getTargetInputField(e) {\n\n      // Check if this fit of one of the case\n      let hasErrorFor     = $(e).attr(\"errorFor\") != undefined,\n          afterInput      = supportedTag.includes( $(e).prev().prop(\"tagName\") ),\n          underErrorGroup = $(e).parent().prop(\"tagName\") == \"errorGroup\".toUpperCase();\n      let underErrorGroupWithForKey = (underErrorGroup && $(e).parent().attr(\"errorFor\") !== undefined),\n          underErrorGroupAfterInput = (underErrorGroup && supportedTag.includes( $(e).parent().prev().prop(\"tagName\") ));\n\n      // Return the actual input field\n      if (hasErrorFor) {\n        let idKey = \"#\" + $(e).attr(\"errorFor\");\n        return $(idKey);\n\n      } else if (afterInput) {\n        return $(e).prev();\n\n      } else if (underErrorGroupWithForKey) {\n        let idKey = \"#\" + $(e).parent().attr(\"errorFor\");\n        return $(idKey);\n\n      } else if (underErrorGroupAfterInput) {\n        return $(e).parent().prev();\n      }\n\n      // Everything else is an issue, Exit\n      console.error(\"Error message with no paired validation target:\\n'\"+$(e).text()+\"'\");\n      return undefined;\n\n    }\n    // End of getTargetInputField() ~~~~~~~~~~~~~~~~~~~~~~~\n\n    // Loop thru all form fields\n    eachField_forDebugging() {\n      // TODO: Move all debug logic to this umbrella\n      $(supportedTag.join(',')).each((idx, e) => {\n        let rules = $(e).data(nameSpaceKey+\"rules\") || [];\n        settings.DEBUG_MODE && console.log($(e).attr(\"id\"), rules);\n      });\n\n    }\n\n    resetFormError() {\n      $el.find(supportedTag.join(',')).attr(\"aria-invalid\", false);\n      // $el.find(supportedTag.join(',')).each(() => {\n      //   $(this).attr(\"aria-invalid\", false);\n      // });\n      $(\"error, .error\").removeClass(\"errorShow\");\n    }\n\n    // TODO: replease the following method by npm UUID\n    generateUUID_v4() {        // Public Domain/MIT\n      let d = new Date().getTime();     // ***Timestamp, better use Date.now()\n      let d2 = (performance && performance.now && (performance.now()*1000)) || 0; //Time in microseconds since page-load or 0 if unsupported\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        let r = Math.random() * 16;   //random number between 0 and 16\n        if(d > 0){                    //Use timestamp until depleted\n          r = (d + r)%16 | 0;\n          d = Math.floor(d/16);\n        } else {                      //Use microseconds since page-load if supported\n          r = (d2 + r)%16 | 0;\n          d2 = Math.floor(d2/16);\n        }\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n      });\n    }\n    // End of UUID_v4\n  }\n\n  // Avoid duplicated instantiations ~~~~~~~~~~~~~~~~~~~~~~\n  $.fn[pluginName] = function(options) {\n    return this.each(function () {\n      if (!$.data(this, 'plugin_'+ pluginName)) {\n        $.data(this, 'plugin_'+ pluginName, new p[pluginName](this, options));\n      }\n    });\n  };\n});"],"file":"../../src/js/jQuery.FormHelper.es6-min.js"}