{"version":3,"sources":["../src/js/jQuery.FormHelper.es6.js"],"names":["global","factory","define","amd","$","document","exports","module","require","jQuery","window","this","undefined","settings","defaultOptions","disableSubmitBtn","errorHurdling","DEBUG_MODE","p","ERROR","params","console","error","toString","supportedTag","supportedType","nameSpaceKey","replace","c","toLowerCase","$el","[object Object]","el","opts","extend","init","attr","pairingErrorAndFields","info","DEBUG","pluginName","find","prop","submit","e","preventDefault","resetFormError","validationLoop","target","log","join","each","idx","rules","data","val","forEach","r","result","validationDelegator","nameKey","errors","length","addClass","rule","toLocaleLowerCase","trim","emailAddrString","test","validateEmail","phoneNumberString","validateTel","includes","split","inputTag","getTargetInputField","inputNameStr","generateUUID_v4","errorRules","rulesArr","finalRules","Set","concat","warn","WARNING","typeOfField","required","existingRules","push","hasErrorFor","afterInput","prev","underErrorGroup","parent","toUpperCase","underErrorGroupWithForKey","underErrorGroupAfterInput","text","removeClass","d","Date","getTime","d2","performance","now","Math","random","floor","fn","options"],"mappings":"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","sourcesContent":["/**\n * Form Validation Helper jQuery Plugin\n * Author: Kevin\n * Mar-2020\n *\n * Changelog:\n * Mar-2020 - Rewrite into ES6\n *\n * Features:\n * 1. Validation Form fields value based on type or Regex\n * 2. Display, focus, (and scroll to) error (or the first of) message\n * 3. Support validation of single field or all fields\n *\n * Special thanks to @publicJorn [Jorn Luiten] for the ES6 jQuery Plugins template\n */\n(function(global, factory) {\n  'use strict';\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], function($) {\n      return factory($, global, global.document);\n    });\n  } else if (typeof exports === \"object\" && exports) {\n    module.exports = factory(require('jquery'), global, global.document);\n  } else {\n    factory(jQuery, global, global.document);\n  }\n})(typeof window !== 'undefined' ? window : this, function($, window, document, undefined) {\n  'use strict';\n\n  const pluginName = 'FormHelper';\n\n  // -- Globals (shared across all plugin instances)\n  let settings = {};\n  const defaultOptions = {\n    // Component(s) default behavior\n    disableSubmitBtn : true,\n    errorHurdling    : false,\n    // Development Related\n    DEBUG_MODE : false,\n  };\n\n  // const $window = $(window);\n  // const $document = $(document);\n\n  // p = placeholder, together with pluginName\n  const p = {};\n\n  // Utilities Func\n  const DEBUG   = (...params) => { settings.DEBUG_MODE && console.info ( \"DEBUG:\\n\\t\"   + params.toString() + \"\\n---\"); }\n  const ERROR   = (...params) => { settings.DEBUG_MODE && console.error( \"ERROR:\\n\\t\"   + params.toString() + \"\\n---\"); }\n  const WARNING = (...params) => { settings.DEBUG_MODE && console.warn ( \"WARNING:\\n\\t\" + params.toString() + \"\\n---\"); }\n  const isJSON  = (str) => {\n    let jsonObj = undefined;\n    try { jsonObj = JSON.parse(str); } catch (e) { return undefined; }\n    return jsonObj;\n  }\n\n  // Regex Test Methods\n  const validateEmail = (emailAddrString) => (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(emailAddrString));\n  const validateTel = (phoneNumberString) => (/^[\\+]?[(]?[0-9]{0,3}[)]?[-\\s]?[0-9]{4}[-\\s]?[0-9]{4,6}$/.test(phoneNumberString));\n\n  // TODO: addition tag & type needs to be supported\n  const supportedTag = [\"INPUT\", \"TEXTAREA\"/* , \"SELECT\" */];\n  const supportedType = [\"EMAIL\", \"TEL\", \"NUMBER\"];\n  const nameSpaceKey = pluginName.replace(/^\\w/, c => c.toLowerCase())+\"_\";\n\n  let $el;\n\n  p[pluginName] = class {\n    constructor (el, opts) {\n      $el = $(el);\n      settings = $.extend({}, defaultOptions, opts) ;\n      // this._defaultOptions = defaultOptions;\n\n      this.init();\n    }\n\n    init() {\n      // Let's disable HTML5 default validation\n      $el.attr(\"novalidate\", \"\");\n\n\n      // Preparing\n      this.pairingErrorAndFields();\n      DEBUG(pluginName+\"(\"+$el.attr('id')+\")\"+' initialised');\n\n      // this.eachField_forDebugging();\n\n      if (settings.disableSubmitBtn) {\n        // TODO: this needs to be handle together with \"on_change\" & \"on_submit\"\n        $el.find('[type=\"submit\"]').prop(\"disabled\", true);\n      }\n      if (true) {\n        // TODO: this needs to be handle together with \"on_change\" & \"on_submit\"\n        $el.submit((e) => {\n          e.preventDefault();\n\n          this.resetFormError(e);\n          this.validationLoop(e);\n\n          return false;\n        })\n      }\n\n    }\n\n\n    /**\n     * Perform a full test on specified form fields\n     */\n    validationLoop(e) {\n      let $el = $(e.target);\n\n      settings.DEBUG_MODE && console.log(\"Validation Loop: \"+$el.attr(\"id\"));\n\n      $el.find(supportedTag.join(',')).each((idx, e) => {\n        let rules = $(e).data(nameSpaceKey+\"rules\");\n        let val = $(e).val();\n\n        rules.forEach( r => {\n          let result = this.validationDelegator(val, r);\n          console.log(\"Testing[\"+$(e).attr(\"name\")+\": '\"+val+\"' with rule: '\"+r+\"'] = \" + result);\n\n          if (!result) {\n            // Error show up\n            let nameKey = $(e).attr(\"name\");\n            $(e).attr(\"aria-invalid\", true);\n\n            let errors = $el.find('error[errorFor=\"'+nameKey+'\"][data-rule=\"'+r+'\"], .error[errorFor=\"'+nameKey+'\"][data-rule=\"'+r+'\"]');\n            if (errors.length == 1) {\n              errors.addClass(\"errorShow\");\n            } else if (errors.length > 1) {\n              $el.find('error[data-rule=\"'+r+'\"], .error[data-rule=\"'+r+'\"]').addClass(\"errorShow\");\n            } else {\n              ERROR(\"Error message disappeared! Something wrong happened\");\n            }\n\n            // return result;  // TODO: needs to handle \"errorHurdling\"\n          }\n        });\n      });\n\n      return false;\n    }\n\n\n    /**\n     * Test single form field (or a single group like checkbox)\n     * and then return validation result (true or false)\n     *\n     * p.s. for 'Required', 'email', 'tel' rule, string will be trim and test but other won't\n     *\n     * @param {string} val - Form Field value in text\n     * @param {string} rule - Name (key) of validation rule, single value only\n     */\n    validationDelegator(val, rule) {\n\n      // if (!val) {\n      //   ERROR(\"Value to be tested is empty\");\n      //   return false;\n      // }\n\n      let r = rule.toLocaleLowerCase().replace(/\\s/g, \"\");\n\n      if (r === \"required\") {\n        return (val.trim().length > 0);\n      } else if (r === \"email\") {\n        return validateEmail(val.trim());\n      } else if (r === \"tel\") {\n        return validateTel(val.trim());\n      } else if (r.includes(\"max:\")) {\n        return val.trim() <= r.split(\":\")[1];\n        // return false; //val.trim()\n      } else {\n        ERROR(\"Rule: \"+r+\" is not supported\");\n        return true;\n      }\n      return false;\n    }\n\n\n    // Link up error message to form fields\n    pairingErrorAndFields() {\n\n      // Gather all rules & store in Form Fields for future use\n      $el.find(\".error, error\").each((idx, e) => {\n\n        let inputTag = this.getTargetInputField(e);\n        if (inputTag) {\n\n          // Pairing by NAME tag\n          let inputNameStr = $(inputTag).attr(\"name\") || this.generateUUID_v4();\n          $(e).data(\"errorFor\", inputNameStr).attr(\"errorFor\", inputNameStr);\n\n          // Copy rules into input fields\n          // 1. gathering all rules into single list (single source of truth)\n          let errorRules = $(e).attr(\"data-rule\") ? $(e).attr(\"data-rule\").toLowerCase().split(',') : [];\n          let rulesArr = $(inputTag).data(nameSpaceKey+\"rules\") || [];\n          let finalRules = [...new Set(rulesArr.concat(errorRules))];  //Array\n          // finalRules = finalRules.map((e) => { return e.replace(/\\s/g, \"\"); /*.trim();*/ });  // remove all spaces\n          // let finalRules = $.extend({}, errorRules, rulesJson); // JSON\n\n          $(inputTag).data(nameSpaceKey+\"rules\", finalRules);\n          if (settings.DEBUG_MODE) {\n            // make it visible for debug\n            $(inputTag).attr(nameSpaceKey+\"rules\", finalRules.join(\",\"));\n          }\n\n          // mark input field as required, just in case\n          if (errorRules.includes(\"required\")) {\n            $(inputTag).prop(\"required\", true);\n          }\n\n          // Warning if input field has no NAME tag\n          if ( ! $(inputTag).attr(\"name\")) {\n            $(inputTag).attr(\"name\", inputNameStr);\n            WARNING(\"Form field missing 'NAME' attribute, generated an UUID instead [\"+inputNameStr+\"]\");\n          }\n\n        }\n\n      });\n\n      // Then scan form field(s) if any missing fules\n      // TODO: future requirement, special rules defined in form field\n      $el.find(supportedTag.join(',')).each((idx, e) => {\n        let typeOfField = supportedType.includes( $(e).prop(\"type\") ) ? $(e).prop(\"type\") : \"\";\n        let required = $(e).prop(\"required\") ? \"required\" : \"\";\n        // TODO: regex rules\n        let existingRules = $(e).data(nameSpaceKey+\"rules\") || [];\n\n        if (typeOfField != \"\")  { existingRules.push(typeOfField); }\n        if (required != \"\")     { existingRules.push(required); }\n        existingRules = [...new Set(existingRules)];\n\n        $(e).data(nameSpaceKey+\"rules\", existingRules);\n        if (settings.DEBUG_MODE) {\n          $(e).attr(nameSpaceKey+\"rules\", existingRules.join(\",\"));\n        }\n\n      });\n    }\n\n    // Keep looking for target until found\n    getTargetInputField(e) {\n\n      // Check if this fit of one of the case\n      let hasErrorFor     = $(e).attr(\"errorFor\") != undefined,\n          afterInput      = supportedTag.includes( $(e).prev().prop(\"tagName\") ),\n          underErrorGroup = $(e).parent().prop(\"tagName\") == \"errorGroup\".toUpperCase();\n      let underErrorGroupWithForKey = (underErrorGroup && $(e).parent().attr(\"errorFor\") !== undefined),\n          underErrorGroupAfterInput = (underErrorGroup && supportedTag.includes( $(e).parent().prev().prop(\"tagName\") ));\n\n      // Return the actual input field\n      if (hasErrorFor) {\n        let nameKey = \"[name='\" + $(e).attr(\"errorFor\") + \"']\" || \"\";\n        return $(nameKey);\n\n      } else if (afterInput) {\n        return $(e).prev();\n\n      } else if (underErrorGroupWithForKey) {\n        let nameKey = \"[name='\" + $(e).parent().attr(\"errorFor\") + \"']\";\n        return $(nameKey);\n\n      } else if (underErrorGroupAfterInput) {\n        return $(e).parent().prev();\n      }\n\n      // Everything else is an issue, Exit\n      console.error(\"Error message with no paired validation target:\\n'\"+$(e).text()+\"'\");\n      return undefined;\n\n    }\n    // End of getTargetInputField() ~~~~~~~~~~~~~~~~~~~~~~~\n\n    // Loop thru all form fields\n    eachField_forDebugging() {\n      // TODO: Move all debug logic to this umbrella\n      $(supportedTag.join(',')).each((idx, e) => {\n        let rules = $(e).data(nameSpaceKey+\"rules\") || [];\n        settings.DEBUG_MODE && console.log($(e).attr(\"name\"), rules);\n      });\n\n    }\n\n    resetFormError(e) {\n      let $el = $(e.target);\n      $el.find(supportedTag.join(',')).attr(\"aria-invalid\", false);\n      // $el.find(supportedTag.join(',')).each(() => {\n      //   $(this).attr(\"aria-invalid\", false);\n      // });\n      $el.find(\"error.errorShow, .error.errorShow\").removeClass(\"errorShow\");\n    }\n\n    // TODO: replease the following method by npm UUID\n    generateUUID_v4() {        // Public Domain/MIT\n      let d = new Date().getTime();     // ***Timestamp, better use Date.now()\n      let d2 = (performance && performance.now && (performance.now()*1000)) || 0; //Time in microseconds since page-load or 0 if unsupported\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        let r = Math.random() * 16;   //random number between 0 and 16\n        if(d > 0){                    //Use timestamp until depleted\n          r = (d + r)%16 | 0;\n          d = Math.floor(d/16);\n        } else {                      //Use microseconds since page-load if supported\n          r = (d2 + r)%16 | 0;\n          d2 = Math.floor(d2/16);\n        }\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n      });\n    }\n    // End of UUID_v4\n  }\n\n  // Clearup for bug trigger\n  $el = undefined;\n  // Avoid duplicated instantiations ~~~~~~~~~~~~~~~~~~~~~~\n  $.fn[pluginName] = function(options) {\n    return this.each(function () {\n      if (!$.data(this, 'plugin_'+ pluginName)) {\n        $.data(this, 'plugin_'+ pluginName, new p[pluginName](this, options));\n      }\n    });\n  };\n});"],"file":"../../src/js/jQuery.FormHelper.es6-min.js"}